#!/usr/bin/python3
import sys
import os
import time
import pwd
import grp
import pickle
import signal
import configparser

configFile = "/etc/lcd.conf"
config = configparser.ConfigParser()
try:
    config.read(configFile)
except Exception as e:
    print("Problem reading configuration from " + configFile + "\n")
    print(e)
    sys.exit(1)


#We need the I2C_LCD_driver module
#Originally this module came from 
# https://gist.github.com/DenisFromHR/cc863375a6e19dce359d
if  config.get('Global','lcd-driver', fallback=False):
    sys.path.insert(0,config['Global']['lcd-driver'])

import I2C_LCD_driver

#Now go ahead and just update the PID file.
pidwriter = open(config['Global']['pidfile'],"w")
pidwriter.write(str(os.getpid())+"\n")
pidwriter.close()


#Create the pipe if it's not there.  Open it for reading
if not os.path.exists(config['Global']['interface']):
    os.mkfifo(config['Global']['interface'])

#Make sure ownership and permissions are correct
os.chown(config['Global']['interface'],pwd.getpwnam(config['Global']['ifowner'])[2],grp.getgrnam(config['Global']['ifgroup'])[2])
os.chmod(config['Global']['interface'],int(config['Global']['ifmode'],8))

#Maybe handle some signals
#These are probably the only way we'll exit.
def stop(signum,frame):
    try:
        control.close()
        pidwriter.close()
    except:
        pass
    sys.exit(0)
signal.signal(signal.SIGINT,stop)
signal.signal(signal.SIGTERM,stop)

#In fact, we'll just do display updates by signal.
#This way we can support a "refresh" by way of SIGHUP.
def refresh(signum,frame):
    global config
    global data
    lines = int(config['Global']['lines'])
    columns = int(config['Global']['columns'])
    #In this case, we actually need to do the wrapping ourselves.
    if 'longline' in data:
        for cur in range(1,lines+1):
            eol = columns*cur
            sol = eol-columns
            panel.lcd_display_string(data['longline'][sol:eol].ljust(columns),cur)
    else:
        for cur in range(1,lines+1):
            panel.lcd_display_string(data[cur][0:columns-1].ljust(columns),cur)
signal.signal(signal.SIGHUP,refresh)

#This one gets the data from the client, updates the local structure, and calls
# refresh for us.
def update(signum,frame):
    nerr = 0
    global config
    global data
    control = open(config['Global']['interface'],"rb")
    frame = b''
    while True:
        try:
            frame += control.read()
        except Exception as e:
            print(e)
            print("Can't read update.  Leaving update handler.")
            control.close()
            return
        try: 
            newdata = pickle.loads(frame)
        except Exception as e:
            print(e)
            nerr += 1
            print("Try " + str(nerr))
            if err < int(config['Global']['maxerr']):
                continue
            else:
                print("Malformed update.  Leaving update handler.")
                control.close()
                return
        #Got one.
        control.close()
        if 'longline' in newdata:
            data['longline'] = newdata['longline']
        else:
            data.pop('longline',False)
            for cur in range(1,int(config['Global']['lines'])+1):
                    if cur in newdata:  #... then update the data object.
                        data[cur] = newdata[cur]
        break

    os.kill(os.getpid(),signal.SIGHUP)     

signal.signal(signal.SIGUSR1,update)

#Start with all possible` lines off.
data = {}
for cur in range(1,int(config['Global']['lines'])+1):
    data[cur] = ""

#Initialize the display
panel = I2C_LCD_driver.lcd()
panel.lcd_clear()

while True:
    time.sleep(30)

